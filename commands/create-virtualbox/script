#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: docker-machine:create-virtualbox: "Create a machine with the virtualbox driver"
#/ usage: rerun docker-machine:create-virtualbox  --name <>  --docker-cert-path <${DOCKER_CERT_PATH:-}>  --docker-host <${DOCKER_HOST:-}>  --docker-tls-verify <${DOCKER_TLS_VERIFY:-}> [ --virtualbox-memory <>] [ --virtualbox-cpu-count <>] [ --virtualbox-disk-size <>] [ --virtualbox-boot2docker-url <>] [ --virtualbox-import-boot2docker-vm <>] [ --virtualbox-hostonly-cidr <>] [ --engine-label <>] [ --engine-opt <>] [ --engine-insecure-registry <>] [ --engine-registry-mirror <>] [ --engine-storage-driver <>] [ --swarm <>] [ --swarm-master <>] [ --swarm-discovery <>] [ --swarm-host <>] [ --swarm-addr <>]  --machine-storage-path <${MACHINE_STORAGE_PATH:-}> 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh create-virtualbox || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: docker-machine:create-virtualbox. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: NAME DOCKER_CERT_PATH DOCKER_HOST DOCKER_TLS_VERIFY VIRTUALBOX_MEMORY VIRTUALBOX_CPU_COUNT VIRTUALBOX_DISK_SIZE VIRTUALBOX_BOOT2DOCKER_URL VIRTUALBOX_IMPORT_BOOT2DOCKER_VM VIRTUALBOX_HOSTONLY_CIDR ENGINE_LABEL ENGINE_OPT ENGINE_INSECURE_REGISTRY ENGINE_REGISTRY_MIRROR ENGINE_STORAGE_DRIVER SWARM SWARM_MASTER SWARM_DISCOVERY SWARM_HOST SWARM_ADDR MACHINE_STORAGE_PATH

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

echo "DEBUG: \$@=$@"
rerun_options_parse "$@"


# Command implementation
# ----------------------
export PATH=$PATH:/usr/bin

# Set the docker command
: ${DOCKER_COMMAND:=docker-machine}

opts=(--driver virtualbox)

[[ -n "${VIRTUALBOX_MEMORY:-}" ]] && opts=(${opts[*]:-} --virtualbox-memory $VIRTUALBOX_MEMORY)
[[ -n "${VIRTUALBOX_CPU_COUNT:-}" ]] && opts=(${opts[*]:-} --virtualbox-cpu-count $VIRTUALBOX_CPU_COUNT)
[[ -n "${VIRTUALBOX_DISK_SIZE:-}" ]] && opts=(${opts[*]:-} --virtualbox-disk-size $VIRTUALBOX_DISK_SIZE)
[[ -n "${VIRTUALBOX_BOOT2DOCKER_URL:-}" ]] && opts=(${opts[*]:-} --virtualbox-boot2docker-url $VIRTUALBOX_BOOT2DOCKER_URL)
[[ -n "${VIRTUALBOX_IMPORT_BOOT2DOCKER_VM:-}" ]] && opts=(${opts[*]:-} --virtualbox-import-boot2docker-vm $VIRTUALBOX_IMPORT_BOOT2DOCKER_VM)
[[ -n "${VIRTUALBOX_HOSTONLY_CIDR:-}" ]] && opts=(${opts[*]:-} --virtualbox-hostonly-cidr $VIRTUALBOX_HOSTONLY_CIDR)

opts=( $(parse_create_common_options) ${opts[*]:-} )


# Execute the command
rerun_log info "executing: $DOCKER_COMMAND create ${opts[*]:-} $NAME"
$DOCKER_COMMAND create ${opts[*]:-} $NAME

# Done. Exit with last command exit status.
exit $?

